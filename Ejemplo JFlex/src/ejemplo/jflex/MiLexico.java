// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/ejemplo/jflex/lexico.flex

/* Ejemplo de JFlex */
package ejemplo.jflex;
import java.util.Stack;
/* Aqui arriva se importan todos los paquetes que necesite el codigo */

/*
 * Esta clase es un ejemplo simple de un lexer.
 */

@SuppressWarnings("fallthrough")
public class MiLexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;
  public static final int COMENTARIO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\5\1\6\22\0"+
    "\1\7\1\10\1\11\1\0\1\12\3\0\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\12\23\1\24"+
    "\1\0\1\25\1\26\1\27\2\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\41\1\50\1\51"+
    "\1\52\1\53\1\41\1\54\1\41\1\55\1\41\1\56"+
    "\1\57\1\60\1\0\1\61\1\0\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\41\1\71\1\41\1\72"+
    "\1\73\1\41\1\74\1\75\2\41\1\76\1\77\1\100"+
    "\1\101\3\41\1\102\1\41\1\103\1\0\1\104\7\0"+
    "\1\4\32\0\1\105\u01df\0\1\105\177\0\13\105\35\0"+
    "\2\4\5\0\1\105\57\0\1\105\240\0\1\105\377\0"+
    "\u0100\106";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\12\22\1\23\1\24\7\22\1\25"+
    "\1\26\1\27\1\30\2\27\5\31\2\0\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\14\22\1\0\1\44\3\0\10\22\1\45\1\22\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\2\0\6\22\1\57\5\22\1\0\2\22\1\60\4\22"+
    "\1\61\1\62\1\22\2\0\6\22\1\63\7\22\1\64"+
    "\1\0\1\65\1\22\2\0\1\66\3\22\1\0\1\22"+
    "\1\67\12\22\1\0\2\22\1\70\1\71\1\22\1\72"+
    "\1\22\1\73\13\22\1\0\3\22\1\74\4\22\1\75"+
    "\11\22\1\0\2\22\1\76\2\22\1\77\4\22\1\100"+
    "\5\22\1\0\1\22\1\101\1\22\1\102\11\22\1\103"+
    "\13\22\1\0\7\22\1\104\1\22\1\0\1\22\1\105"+
    "\7\22\1\0\1\106\1\0\4\22\1\107\2\22\1\110"+
    "\1\111\2\22\1\0\5\22\1\0\1\112\2\22\1\113"+
    "\1\22\1\0\3\22\1\0\2\22\1\114\1\115\1\116"+
    "\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\325\0\u0163\0\u01aa"+
    "\0\325\0\u01f1\0\u0238\0\325\0\u027f\0\325\0\325\0\325"+
    "\0\u02c6\0\325\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429\0\u0470"+
    "\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661\0\u06a8"+
    "\0\u06ef\0\u0736\0\325\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899"+
    "\0\u08e0\0\u0927\0\u096e\0\325\0\325\0\325\0\u0238\0\u09b5"+
    "\0\325\0\u0238\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\325"+
    "\0\325\0\325\0\325\0\325\0\u02c6\0\325\0\325\0\325"+
    "\0\325\0\u0b5f\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09"+
    "\0\u0d50\0\u0d97\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\325\0\u0efa"+
    "\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132"+
    "\0\u1179\0\u11c0\0\u0470\0\u1207\0\325\0\325\0\325\0\325"+
    "\0\325\0\325\0\325\0\325\0\325\0\u124e\0\u1295\0\u12dc"+
    "\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514"+
    "\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u0470\0\u1705"+
    "\0\u174c\0\u1793\0\u17da\0\u0470\0\u0470\0\u1821\0\u1868\0\u18af"+
    "\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7"+
    "\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u0470\0\u1cd8"+
    "\0\325\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9"+
    "\0\u1f10\0\u1f57\0\u0470\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba"+
    "\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u22f2"+
    "\0\325\0\325\0\u2339\0\u0470\0\u2380\0\325\0\u23c7\0\u240e"+
    "\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u2646"+
    "\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u0470\0\u27f0\0\u2837"+
    "\0\u287e\0\u28c5\0\u0470\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28"+
    "\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u0470"+
    "\0\u2c60\0\u2ca7\0\u0470\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u0470"+
    "\0\u2e0a\0\u2e51\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u0470"+
    "\0\u2ffb\0\u0470\0\u3042\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5"+
    "\0\u31ec\0\u3233\0\u327a\0\325\0\u32c1\0\u3308\0\u334f\0\u3396"+
    "\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540\0\u3587\0\u35ce"+
    "\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u0470"+
    "\0\u3806\0\u384d\0\u3894\0\325\0\u38db\0\u3922\0\u3969\0\u39b0"+
    "\0\u39f7\0\u3a3e\0\u3a85\0\u3acc\0\325\0\u3b13\0\u3b5a\0\u3ba1"+
    "\0\u3be8\0\u3c2f\0\u0470\0\u3c76\0\u3cbd\0\325\0\325\0\u3d04"+
    "\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u3f3c"+
    "\0\u0470\0\u3f83\0\u3fca\0\u0470\0\u4011\0\u4058\0\u409f\0\u40e6"+
    "\0\u412d\0\u4174\0\u41bb\0\u4202\0\u0470\0\325\0\u0470\0\u0470";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\4\1\6\1\7\1\6\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\2\30\1\36\2\30"+
    "\1\37\3\30\1\40\2\30\1\41\3\30\1\42\1\4"+
    "\1\43\1\30\1\44\1\45\3\30\1\46\1\30\1\47"+
    "\2\30\1\50\1\51\1\30\1\52\3\30\1\53\1\54"+
    "\2\4\11\55\1\56\1\55\1\57\43\55\1\60\27\55"+
    "\13\61\1\62\1\61\1\63\40\61\1\64\24\61\1\65"+
    "\3\61\176\0\1\66\10\0\1\67\11\0\1\6\131\0"+
    "\1\70\60\0\3\12\4\0\77\12\16\0\1\71\105\0"+
    "\1\72\43\0\1\73\23\0\1\74\25\0\1\75\104\0"+
    "\1\75\1\0\1\23\111\0\1\76\106\0\1\77\106\0"+
    "\1\100\106\0\1\101\103\0\1\30\4\0\26\30\3\0"+
    "\22\30\27\0\1\30\4\0\1\102\17\30\1\103\5\30"+
    "\3\0\22\30\27\0\1\30\4\0\16\30\1\104\7\30"+
    "\3\0\22\30\27\0\1\30\4\0\4\30\1\105\3\30"+
    "\1\106\15\30\3\0\22\30\27\0\1\30\4\0\13\30"+
    "\1\107\1\30\1\110\10\30\3\0\22\30\27\0\1\30"+
    "\4\0\13\30\1\111\12\30\3\0\22\30\27\0\1\30"+
    "\4\0\15\30\1\112\10\30\3\0\22\30\27\0\1\30"+
    "\4\0\16\30\1\113\7\30\3\0\22\30\27\0\1\30"+
    "\4\0\20\30\1\114\5\30\3\0\22\30\27\0\1\30"+
    "\4\0\7\30\1\115\16\30\3\0\22\30\6\0\6\116"+
    "\5\0\1\117\2\0\1\120\1\121\1\0\1\122\61\0"+
    "\1\116\24\0\1\30\4\0\26\30\3\0\2\30\1\123"+
    "\7\30\1\124\1\125\6\30\27\0\1\30\4\0\26\30"+
    "\3\0\14\30\1\126\1\127\4\30\27\0\1\30\4\0"+
    "\26\30\3\0\12\30\1\130\7\30\27\0\1\30\4\0"+
    "\26\30\3\0\13\30\1\131\6\30\27\0\1\30\4\0"+
    "\26\30\3\0\14\30\1\132\5\30\27\0\1\30\4\0"+
    "\26\30\3\0\15\30\1\133\4\30\27\0\1\30\4\0"+
    "\26\30\3\0\17\30\1\134\2\30\21\0\1\135\102\0"+
    "\1\136\62\0\1\137\3\0\1\140\22\0\1\141\43\0"+
    "\1\142\23\0\1\143\17\0\1\144\106\0\1\145\153\0"+
    "\1\146\122\0\1\147\33\0\1\30\4\0\2\30\1\150"+
    "\23\30\3\0\22\30\27\0\1\30\4\0\4\30\1\151"+
    "\21\30\3\0\22\30\27\0\1\30\4\0\15\30\1\152"+
    "\10\30\3\0\22\30\27\0\1\30\4\0\2\30\1\153"+
    "\23\30\3\0\22\30\27\0\1\30\4\0\21\30\1\154"+
    "\4\30\3\0\22\30\27\0\1\30\4\0\21\30\1\155"+
    "\4\30\3\0\22\30\27\0\1\30\4\0\3\30\1\156"+
    "\22\30\3\0\22\30\27\0\1\30\4\0\16\30\1\157"+
    "\7\30\3\0\22\30\27\0\1\30\4\0\17\30\1\160"+
    "\6\30\3\0\22\30\27\0\1\30\4\0\16\30\1\161"+
    "\7\30\3\0\22\30\27\0\1\30\4\0\16\30\1\162"+
    "\7\30\3\0\22\30\27\0\1\30\4\0\4\30\1\163"+
    "\21\30\3\0\22\30\6\0\6\116\10\0\1\120\1\121"+
    "\1\0\1\122\61\0\1\116\22\0\1\121\1\0\1\122"+
    "\106\0\1\164\104\0\1\164\1\0\1\122\106\0\1\30"+
    "\4\0\26\30\3\0\16\30\1\165\3\30\27\0\1\30"+
    "\4\0\26\30\3\0\12\30\1\166\7\30\27\0\1\30"+
    "\4\0\26\30\3\0\4\30\1\167\14\30\1\170\27\0"+
    "\1\30\4\0\26\30\3\0\14\30\1\171\5\30\27\0"+
    "\1\30\4\0\26\30\3\0\5\30\1\172\14\30\27\0"+
    "\1\30\4\0\26\30\3\0\14\30\1\173\5\30\27\0"+
    "\1\30\4\0\26\30\3\0\17\30\1\174\2\30\27\0"+
    "\1\30\4\0\26\30\3\0\17\30\1\175\2\30\27\0"+
    "\1\30\4\0\26\30\3\0\15\30\1\176\4\30\77\0"+
    "\1\177\114\0\1\200\30\0\1\30\4\0\12\30\1\201"+
    "\13\30\3\0\22\30\27\0\1\30\4\0\1\202\25\30"+
    "\3\0\22\30\27\0\1\30\4\0\3\30\1\203\16\30"+
    "\1\204\3\30\3\0\22\30\27\0\1\30\4\0\13\30"+
    "\1\205\12\30\3\0\22\30\27\0\1\30\4\0\17\30"+
    "\1\206\6\30\3\0\22\30\27\0\1\30\4\0\4\30"+
    "\1\207\21\30\3\0\22\30\27\0\1\30\4\0\3\30"+
    "\1\210\13\30\1\211\6\30\3\0\1\212\21\30\27\0"+
    "\1\30\4\0\1\213\25\30\3\0\22\30\27\0\1\30"+
    "\4\0\23\30\1\214\2\30\3\0\22\30\27\0\1\30"+
    "\4\0\17\30\1\215\6\30\3\0\22\30\27\0\1\30"+
    "\4\0\6\30\1\216\17\30\3\0\22\30\27\0\1\30"+
    "\4\0\15\30\1\217\10\30\3\0\22\30\6\0\6\220"+
    "\7\0\1\116\3\0\1\164\34\0\1\221\24\0\1\220"+
    "\24\0\1\30\4\0\26\30\3\0\17\30\1\222\2\30"+
    "\17\0\1\223\7\0\1\30\4\0\26\30\3\0\22\30"+
    "\17\0\1\224\7\0\1\30\4\0\26\30\3\0\22\30"+
    "\27\0\1\30\4\0\26\30\3\0\12\30\1\225\7\30"+
    "\27\0\1\30\4\0\26\30\3\0\1\30\1\226\20\30"+
    "\27\0\1\30\4\0\26\30\3\0\1\30\1\227\20\30"+
    "\27\0\1\30\4\0\26\30\3\0\10\30\1\230\11\30"+
    "\103\0\1\200\75\0\1\231\43\0\1\30\4\0\24\30"+
    "\1\232\1\30\3\0\22\30\27\0\1\30\4\0\12\30"+
    "\1\233\13\30\3\0\22\30\27\0\1\30\4\0\10\30"+
    "\1\234\15\30\3\0\22\30\27\0\1\30\4\0\10\30"+
    "\1\235\15\30\3\0\22\30\27\0\1\30\4\0\1\236"+
    "\25\30\3\0\22\30\27\0\1\30\4\0\13\30\1\237"+
    "\12\30\3\0\22\30\27\0\1\30\4\0\26\30\3\0"+
    "\1\240\21\30\27\0\1\30\4\0\4\30\1\241\21\30"+
    "\3\0\22\30\27\0\1\30\4\0\20\30\1\242\5\30"+
    "\3\0\22\30\27\0\1\30\4\0\13\30\1\243\12\30"+
    "\3\0\22\30\27\0\1\30\4\0\22\30\1\244\3\30"+
    "\3\0\22\30\27\0\1\30\4\0\22\30\1\245\3\30"+
    "\3\0\22\30\13\0\1\246\13\0\1\30\4\0\26\30"+
    "\3\0\22\30\27\0\1\30\4\0\20\30\1\247\5\30"+
    "\3\0\22\30\6\0\6\220\7\0\1\116\40\0\1\221"+
    "\24\0\1\220\24\0\1\30\4\0\26\30\3\0\15\30"+
    "\1\250\4\30\20\0\1\251\106\0\1\252\115\0\1\30"+
    "\4\0\26\30\3\0\5\30\1\253\14\30\27\0\1\30"+
    "\4\0\26\30\3\0\11\30\1\233\10\30\27\0\1\30"+
    "\4\0\26\30\3\0\17\30\1\254\2\30\27\0\1\30"+
    "\4\0\26\30\3\0\13\30\1\255\6\30\5\0\1\256"+
    "\130\0\1\30\4\0\1\257\25\30\3\0\22\30\27\0"+
    "\1\30\4\0\22\30\1\260\3\30\3\0\22\30\27\0"+
    "\1\30\4\0\15\30\1\261\10\30\3\0\22\30\27\0"+
    "\1\30\4\0\20\30\1\262\5\30\3\0\22\30\27\0"+
    "\1\30\4\0\1\263\25\30\3\0\22\30\27\0\1\30"+
    "\4\0\1\30\1\264\24\30\3\0\22\30\27\0\1\30"+
    "\4\0\2\30\1\265\23\30\3\0\22\30\27\0\1\30"+
    "\4\0\16\30\1\266\7\30\3\0\22\30\27\0\1\30"+
    "\4\0\16\30\1\267\7\30\3\0\22\30\27\0\1\30"+
    "\4\0\26\30\3\0\1\270\21\30\27\0\1\30\4\0"+
    "\26\30\3\0\1\271\21\30\60\0\1\272\55\0\1\30"+
    "\4\0\1\273\25\30\3\0\22\30\27\0\1\30\4\0"+
    "\26\30\3\0\1\30\1\274\20\30\27\0\1\30\4\0"+
    "\26\30\3\0\1\30\1\275\20\30\27\0\1\30\4\0"+
    "\26\30\3\0\7\30\1\276\12\30\27\0\1\30\4\0"+
    "\20\30\1\277\5\30\3\0\22\30\27\0\1\30\4\0"+
    "\10\30\1\300\15\30\3\0\22\30\27\0\1\30\4\0"+
    "\23\30\1\301\2\30\3\0\22\30\27\0\1\30\4\0"+
    "\4\30\1\302\21\30\3\0\22\30\27\0\1\30\4\0"+
    "\25\30\1\303\3\0\22\30\27\0\1\30\4\0\1\304"+
    "\25\30\3\0\22\30\27\0\1\30\4\0\13\30\1\305"+
    "\12\30\3\0\22\30\27\0\1\30\4\0\6\30\1\306"+
    "\17\30\3\0\22\30\27\0\1\30\4\0\16\30\1\307"+
    "\7\30\3\0\22\30\27\0\1\30\4\0\1\310\25\30"+
    "\3\0\22\30\27\0\1\30\4\0\1\311\1\312\3\30"+
    "\1\313\2\30\1\314\15\30\3\0\22\30\43\0\1\315"+
    "\72\0\1\30\4\0\14\30\1\316\11\30\3\0\22\30"+
    "\27\0\1\30\4\0\26\30\3\0\3\30\1\317\16\30"+
    "\27\0\1\30\4\0\26\30\3\0\13\30\1\320\6\30"+
    "\27\0\1\30\4\0\3\30\1\321\22\30\3\0\22\30"+
    "\27\0\1\30\4\0\16\30\1\322\7\30\3\0\22\30"+
    "\27\0\1\30\4\0\4\30\1\323\21\30\3\0\22\30"+
    "\27\0\1\30\4\0\26\30\3\0\1\324\21\30\27\0"+
    "\1\30\4\0\2\30\1\325\23\30\3\0\22\30\27\0"+
    "\1\30\4\0\1\326\25\30\3\0\22\30\27\0\1\30"+
    "\4\0\20\30\1\327\5\30\3\0\22\30\27\0\1\30"+
    "\4\0\17\30\1\330\6\30\3\0\22\30\27\0\1\30"+
    "\4\0\20\30\1\331\5\30\3\0\22\30\27\0\1\30"+
    "\4\0\20\30\1\332\5\30\3\0\22\30\27\0\1\30"+
    "\4\0\16\30\1\333\7\30\3\0\22\30\27\0\1\30"+
    "\4\0\13\30\1\334\12\30\3\0\22\30\27\0\1\30"+
    "\4\0\15\30\1\335\10\30\3\0\22\30\40\0\1\336"+
    "\75\0\1\30\4\0\26\30\3\0\1\337\21\30\27\0"+
    "\1\30\4\0\26\30\3\0\17\30\1\340\2\30\27\0"+
    "\1\30\4\0\26\30\3\0\1\341\21\30\27\0\1\30"+
    "\4\0\15\30\1\342\10\30\3\0\22\30\27\0\1\30"+
    "\4\0\21\30\1\343\4\30\3\0\22\30\27\0\1\30"+
    "\4\0\12\30\1\344\13\30\3\0\22\30\27\0\1\30"+
    "\4\0\20\30\1\345\5\30\3\0\22\30\27\0\1\30"+
    "\4\0\1\346\25\30\3\0\22\30\27\0\1\30\4\0"+
    "\20\30\1\347\5\30\3\0\22\30\27\0\1\30\4\0"+
    "\20\30\1\350\5\30\3\0\22\30\27\0\1\30\4\0"+
    "\16\30\1\351\7\30\3\0\22\30\27\0\1\30\4\0"+
    "\16\30\1\352\7\30\3\0\22\30\27\0\1\30\4\0"+
    "\22\30\1\353\3\30\3\0\22\30\51\0\1\354\64\0"+
    "\1\30\4\0\21\30\1\355\4\30\3\0\22\30\27\0"+
    "\1\30\4\0\2\30\1\356\10\30\1\357\12\30\3\0"+
    "\22\30\27\0\1\30\4\0\4\30\1\360\21\30\3\0"+
    "\22\30\27\0\1\30\4\0\24\30\1\361\1\30\3\0"+
    "\22\30\27\0\1\30\4\0\4\30\1\362\21\30\3\0"+
    "\22\30\27\0\1\30\4\0\14\30\1\363\11\30\3\0"+
    "\22\30\27\0\1\30\4\0\1\364\25\30\3\0\22\30"+
    "\27\0\1\30\4\0\1\365\25\30\3\0\22\30\27\0"+
    "\1\30\4\0\13\30\1\366\12\30\3\0\22\30\27\0"+
    "\1\30\4\0\1\367\25\30\3\0\22\30\17\0\1\370"+
    "\7\0\1\30\4\0\26\30\3\0\22\30\27\0\1\30"+
    "\4\0\4\30\1\371\21\30\3\0\22\30\27\0\1\30"+
    "\4\0\16\30\1\372\7\30\3\0\22\30\27\0\1\30"+
    "\4\0\16\30\1\373\7\30\3\0\22\30\27\0\1\30"+
    "\4\0\2\30\1\374\23\30\3\0\22\30\27\0\1\30"+
    "\4\0\1\375\25\30\3\0\22\30\27\0\1\30\4\0"+
    "\26\30\3\0\1\376\21\30\27\0\1\30\4\0\26\30"+
    "\3\0\1\377\21\30\27\0\1\30\4\0\25\30\1\u0100"+
    "\3\0\22\30\27\0\1\30\4\0\25\30\1\u0101\3\0"+
    "\22\30\17\0\1\u0102\7\0\1\30\4\0\26\30\3\0"+
    "\22\30\27\0\1\30\4\0\22\30\1\u0103\3\30\3\0"+
    "\22\30\20\0\1\u0104\115\0\1\30\4\0\2\30\1\u0105"+
    "\23\30\3\0\22\30\27\0\1\30\4\0\15\30\1\u0106"+
    "\10\30\3\0\22\30\27\0\1\30\4\0\16\30\1\u0107"+
    "\7\30\3\0\22\30\27\0\1\30\4\0\22\30\1\u0108"+
    "\3\30\3\0\22\30\27\0\1\30\4\0\20\30\1\u0109"+
    "\5\30\3\0\22\30\27\0\1\30\4\0\21\30\1\u010a"+
    "\4\30\3\0\22\30\27\0\1\30\4\0\21\30\1\u010b"+
    "\4\30\3\0\22\30\17\0\1\u010c\7\0\1\30\4\0"+
    "\26\30\3\0\22\30\20\0\1\u010d\105\0\1\u010e\7\0"+
    "\1\30\4\0\26\30\3\0\22\30\27\0\1\30\4\0"+
    "\22\30\1\u010f\3\30\3\0\22\30\27\0\1\30\4\0"+
    "\3\30\1\u0110\22\30\3\0\22\30\27\0\1\30\4\0"+
    "\17\30\1\u0111\6\30\3\0\22\30\27\0\1\30\4\0"+
    "\10\30\1\u0112\15\30\3\0\22\30\27\0\1\30\4\0"+
    "\3\30\1\u0113\22\30\3\0\22\30\27\0\1\30\4\0"+
    "\4\30\1\u0114\21\30\3\0\22\30\27\0\1\30\4\0"+
    "\4\30\1\u0115\21\30\3\0\22\30\20\0\1\u0116\106\0"+
    "\1\u0117\115\0\1\30\4\0\10\30\1\u0118\15\30\3\0"+
    "\22\30\27\0\1\30\4\0\10\30\1\u0119\15\30\3\0"+
    "\22\30\13\0\1\u011a\13\0\1\30\4\0\26\30\3\0"+
    "\22\30\27\0\1\30\4\0\16\30\1\u011b\7\30\3\0"+
    "\22\30\27\0\1\30\4\0\2\30\1\u011c\23\30\3\0"+
    "\22\30\27\0\1\30\4\0\2\30\1\u011d\23\30\3\0"+
    "\22\30\27\0\1\30\4\0\16\30\1\u011e\7\30\3\0"+
    "\22\30\27\0\1\30\4\0\22\30\1\u011f\3\30\3\0"+
    "\22\30\60\0\1\u0120\55\0\1\30\4\0\15\30\1\u0121"+
    "\10\30\3\0\22\30\27\0\1\30\4\0\22\30\1\u0122"+
    "\3\30\3\0\22\30\27\0\1\30\4\0\22\30\1\u0123"+
    "\3\30\3\0\22\30\27\0\1\30\4\0\15\30\1\u0124"+
    "\10\30\3\0\22\30\27\0\1\30\4\0\10\30\1\u0125"+
    "\15\30\3\0\22\30\43\0\1\u0126\72\0\1\30\4\0"+
    "\10\30\1\u0127\15\30\3\0\22\30\27\0\1\30\4\0"+
    "\10\30\1\u0128\15\30\3\0\22\30\27\0\1\30\4\0"+
    "\16\30\1\u0129\7\30\3\0\22\30\40\0\1\u012a\75\0"+
    "\1\30\4\0\16\30\1\u012b\7\30\3\0\22\30\27\0"+
    "\1\30\4\0\16\30\1\u012c\7\30\3\0\22\30\27\0"+
    "\1\30\4\0\15\30\1\u012d\10\30\3\0\22\30\51\0"+
    "\1\u012e\64\0\1\30\4\0\15\30\1\u012f\10\30\3\0"+
    "\22\30\27\0\1\30\4\0\15\30\1\u0130\10\30\3\0"+
    "\22\30\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[16969];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\2\1\1\11\2\1\1\11"+
    "\1\1\3\11\1\1\1\11\20\1\1\11\10\1\3\11"+
    "\2\1\1\11\4\1\2\0\5\11\1\1\4\11\14\1"+
    "\1\0\1\11\3\0\12\1\11\11\2\0\14\1\1\0"+
    "\12\1\2\0\17\1\1\0\1\11\1\1\2\0\4\1"+
    "\1\0\14\1\1\0\2\1\2\11\3\1\1\11\13\1"+
    "\1\0\22\1\1\0\20\1\1\0\15\1\1\11\13\1"+
    "\1\0\11\1\1\0\1\1\1\11\7\1\1\0\1\11"+
    "\1\0\7\1\2\11\2\1\1\0\5\1\1\0\5\1"+
    "\1\0\3\1\1\0\3\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    /*************************************************************************
    * En esta sección se puede incluir código que se copiará textualmente
    * como parte de la definición de la clase del analizador léxico.
    * Típicamente serán variables de instancia o nuevos métodos de la clase.
    * esta seria la seccion de opciones (segun el profe)
    *************************************************************************/

    /* Variables para reconocer Strings */
    StringBuffer string = new StringBuffer();
    int string_yyline = 0;
    int string_yycolumn = 0;

    Stack<Character> comentarioPila = new Stack<>();
    int nivelComentario = 0;

    private MiToken token(String nombre) {
        return new MiToken(nombre, this.yyline, this.yycolumn);
    }

    private MiToken token(String nombre, Object valor) {
        return new MiToken(nombre, this.yyline, this.yycolumn, valor);
    }

    private MiToken token(String nombre, int line, int column, Object valor) {
        return new MiToken(nombre, line, column, valor);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public MiToken yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case CADENA: {
              throw new Error("Fin de archivo dentro de la cadena en línea " + string_yyline + ", columna " + string_yycolumn);
            }  // fall though
            case 305: break;
            case COMENTARIO: {
              if (!comentarioPila.isEmpty()) {
            throw new Error("Error: Fin de archivo con comentario no cerrado. Se esperaba cierre para " + comentarioPila.peek());
        }
            }  // fall though
            case 306: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Carácter inválido <"+yytext()+">");
            }
          // fall through
          case 80: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 81: break;
          case 3:
            { string.setLength(0);
                         string_yyline = this.yyline;
                         string_yycolumn = this.yycolumn;
                         yybegin(CADENA);
            }
          // fall through
          case 82: break;
          case 4:
            { /* Ignorar */
            }
          // fall through
          case 83: break;
          case 5:
            { return token("PAREN_ABIERTO", yytext());
            }
          // fall through
          case 84: break;
          case 6:
            { return token("PAREN_CERRADO", yytext());
            }
          // fall through
          case 85: break;
          case 7:
            { return token("OP_MUL", yytext());
            }
          // fall through
          case 86: break;
          case 8:
            { return token("OP_SUM", yytext());
            }
          // fall through
          case 87: break;
          case 9:
            { return token("COMA", yytext());
            }
          // fall through
          case 88: break;
          case 10:
            { return token("OP_SUB", yytext());
            }
          // fall through
          case 89: break;
          case 11:
            { return token("PUNTO", yytext());
            }
          // fall through
          case 90: break;
          case 12:
            { return token("OP_DIV", yytext());
            }
          // fall through
          case 91: break;
          case 13:
            { return token("INTEGER_LITERAL", yytext());
            }
          // fall through
          case 92: break;
          case 14:
            { return token("DECLARACION", yytext());
            }
          // fall through
          case 93: break;
          case 15:
            { return token("OP_MEN", yytext());
            }
          // fall through
          case 94: break;
          case 16:
            { return token("EQ",   yytext());
            }
          // fall through
          case 95: break;
          case 17:
            { return token("OP_MAY", yytext());
            }
          // fall through
          case 96: break;
          case 18:
            { return token("IDENTIFICADOR", yytext());
            }
          // fall through
          case 97: break;
          case 19:
            { return token("CORCHETE_ABIERTO", yytext());
            }
          // fall through
          case 98: break;
          case 20:
            { return token("CORCHETE_CERRADO", yytext());
            }
          // fall through
          case 99: break;
          case 21:
            { return token("LLAVE_ABIERTO", yytext());
            }
          // fall through
          case 100: break;
          case 22:
            { return token("LLAVE_CERRADO", yytext());
            }
          // fall through
          case 101: break;
          case 23:
            { string.append(yytext());
            }
          // fall through
          case 102: break;
          case 24:
            { yybegin(YYINITIAL);
                         return token("STRING_LITERAL",
                                      string_yyline, string_yycolumn,
                                      string.toString());
            }
          // fall through
          case 103: break;
          case 25:
            { /* Ignorar otros caracteres dentro del comentario */
            }
          // fall through
          case 104: break;
          case 26:
            { return token("OP_NEQ", yytext());
            }
          // fall through
          case 105: break;
          case 27:
            { comentarioPila.push('('); 
                         nivelComentario = 1; 
                         yybegin(COMENTARIO);
            }
          // fall through
          case 106: break;
          case 28:
            { throw new Error("Error: Se encontró '*)' sin haber abierto un comentario.");
            }
          // fall through
          case 107: break;
          case 29:
            { throw new Error("Error: Se encontró '*]' sin haber abierto un comentario.");
            }
          // fall through
          case 108: break;
          case 30:
            { throw new Error("Error: Se encontró '*}' sin haber abierto un comentario.");
            }
          // fall through
          case 109: break;
          case 31:
            { return token("FLOAT_LITERAL", yytext());
            }
          // fall through
          case 110: break;
          case 32:
            { return token("ASIGNACION", yytext());
            }
          // fall through
          case 111: break;
          case 33:
            { return token("OP_MENI", yytext());
            }
          // fall through
          case 112: break;
          case 34:
            { return token("OP_IGUAL", yytext());
            }
          // fall through
          case 113: break;
          case 35:
            { return token("OP_MAYI", yytext());
            }
          // fall through
          case 114: break;
          case 36:
            { throw new Error("Error: Se encontró '[*' sin haber abierto un (*.");
            }
          // fall through
          case 115: break;
          case 37:
            { return token("OP_OR", yytext());
            }
          // fall through
          case 116: break;
          case 38:
            { throw new Error("Error: Se encontró '{*' sin haber abierto un [*.");
            }
          // fall through
          case 117: break;
          case 39:
            { string.append('\"');
            }
          // fall through
          case 118: break;
          case 40:
            { string.append('\n');
            }
          // fall through
          case 119: break;
          case 41:
            { string.append('\t');
            }
          // fall through
          case 120: break;
          case 42:
            { if (!comentarioPila.isEmpty() && comentarioPila.peek() == '(' && nivelComentario == 1){
            comentarioPila.pop();
            nivelComentario = 3;
            if (comentarioPila.isEmpty()) yybegin(YYINITIAL);
        } else {
            throw new Error("Error de balanceo: Se esperaba cierre para " + comentarioPila.peek());
        }
            }
          // fall through
          case 121: break;
          case 43:
            { if (!comentarioPila.isEmpty() && comentarioPila.peek() == '[' && nivelComentario == 2){
            comentarioPila.pop();
            nivelComentario = 1;
            if (comentarioPila.isEmpty()) yybegin(YYINITIAL);
        } else {
            throw new Error("Error de balanceo: Se esperaba cierre para " + comentarioPila.peek());
        }
            }
          // fall through
          case 122: break;
          case 44:
            { if (!comentarioPila.isEmpty() && comentarioPila.peek() == '{' && nivelComentario == 3){
            comentarioPila.pop();
            nivelComentario = 2;
            if (comentarioPila.isEmpty()) yybegin(YYINITIAL);
        } else {
            throw new Error("Error de balanceo: Se esperaba cierre para " + comentarioPila.peek());
        }
            }
          // fall through
          case 123: break;
          case 45:
            { comentarioPila.push('['); nivelComentario = 2;
            }
          // fall through
          case 124: break;
          case 46:
            { comentarioPila.push('{'); nivelComentario = 3;
            }
          // fall through
          case 125: break;
          case 47:
            { return token("END", yytext());
            }
          // fall through
          case 126: break;
          case 48:
            { return token("OP_AND", yytext());
            }
          // fall through
          case 127: break;
          case 49:
            { return token("TYPE_INT", yytext());
            }
          // fall through
          case 128: break;
          case 50:
            { return token("OP_NOT", yytext());
            }
          // fall through
          case 129: break;
          case 51:
            { return token("ELSE", yytext());
            }
          // fall through
          case 130: break;
          case 52:
            { return token("THEN", yytext());
            }
          // fall through
          case 131: break;
          case 53:
            { return token("ARRAY_LITERAL", yytext());
            }
          // fall through
          case 132: break;
          case 54:
            { return token("TYPE_BOOL", yytext());
            }
          // fall through
          case 133: break;
          case 55:
            { return token("BREAK", yytext());
            }
          // fall through
          case 134: break;
          case 56:
            { return token("ALL_FUNCTION", yytext());
            }
          // fall through
          case 135: break;
          case 57:
            { return token("ANY_FUNCTION", yytext());
            }
          // fall through
          case 136: break;
          case 58:
            { return token("TYPE_FLOAT", yytext());
            }
          // fall through
          case 137: break;
          case 59:
            { return token("BOOLEAN_LITERAL", yytext());
            }
          // fall through
          case 138: break;
          case 60:
            { return token("TYPE_STRING", yytext());
            }
          // fall through
          case 139: break;
          case 61:
            { return token("DISPLAY", yytext());
            }
          // fall through
          case 140: break;
          case 62:
            { return token("BOOLEAN", yytext());
            }
          // fall through
          case 141: break;
          case 63:
            { return token("CONTINUE", yytext());
            }
          // fall through
          case 142: break;
          case 64:
            { return token("END_LOOP", yytext());
            }
          // fall through
          case 143: break;
          case 65:
            { return token("ABSTRACT", yytext());
            }
          // fall through
          case 144: break;
          case 66:
            { return token("CONDITION", yytext());
            }
          // fall through
          case 145: break;
          case 67:
            { return token("LOOP_WHEN", yytext());
            }
          // fall through
          case 146: break;
          case 68:
            { return token("TIPO_FLOAT_ARRAY", yytext());
            }
          // fall through
          case 147: break;
          case 69:
            { return token("INPUT_INT", yytext());
            }
          // fall through
          case 148: break;
          case 70:
            { return token("INPUT_BOOL", yytext());
            }
          // fall through
          case 149: break;
          case 71:
            { return token("ELSE_BACKWARD", yytext());
            }
          // fall through
          case 150: break;
          case 72:
            { return token("INPUT_ARRAY", yytext());
            }
          // fall through
          case 151: break;
          case 73:
            { return token("INPUT_FLOAT", yytext());
            }
          // fall through
          case 152: break;
          case 74:
            { return token("DECLARE_SECTION", yytext());
            }
          // fall through
          case 153: break;
          case 75:
            { return token("PROGRAM_SECTION", yytext());
            }
          // fall through
          case 154: break;
          case 76:
            { return token("BACKWARD_CONDITION", yytext());
            }
          // fall through
          case 155: break;
          case 77:
            { return token("BACKWARD_LOOP_WHEN", yytext());
            }
          // fall through
          case 156: break;
          case 78:
            { return token("ENDDECLARE_SECTION", yytext());
            }
          // fall through
          case 157: break;
          case 79:
            { return token("ENDPROGRAM_SECTION", yytext());
            }
          // fall through
          case 158: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
